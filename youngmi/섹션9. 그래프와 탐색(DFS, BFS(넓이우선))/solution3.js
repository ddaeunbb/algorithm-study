/* 미로탐색(DFS)
7*7 격자판 미로를 탈출하는 경로의 가지수를 출력하는 프로그램을 작성하세요. 
출발점은 격자의 (1, 1) 좌표이고, 탈출 도착점은 (7, 7)좌표이다. 격자판의 1은 벽이고, 0은 통로이다. 
격자판의 움직임은 상하좌우로만 움직인다. 
*/

const solution = (board) => {
  let answer = 0;
  let dx = [-1, 0, 1, 0];
  let dy = [0, 1, 0, -1];

  const dfs = (x, y) => {
    // 가로 세로 전부 6 즉, 도착지에 도착하면 answer++
    if (x === 6 && y === 6) answer++;
    else {
      // 미로의 끝이 아니라면 4방향 확인
      for (let k = 0; k < 4; k++) {
        // 이번에 확인할 x, y 좌표
        let nx = x + dx[k];
        let ny = y + dy[k];
        if (nx >= 0 && nx <= 6 && ny >= 0 && ny <= 6 && board[nx][ny] === 0) {
          // 좌표가 0보다 크고 6보다 작으며(그래야 board 안에 있음) 이번에 살펴보는 좌표가 0이라면(즉 벽이 아니라 통로라면)
          // 방문했었기 때문에 1로 바꾸고 dfs 다시 들어가기
          board[nx][ny] = 1;
          dfs(nx, ny);
          // 한 루트 다 살펴보고 나올 때 방문흔적 1 다시 0으로 바꿔주기
          board[nx][ny] = 0;
        }
      }
    }
  };
  board[0][0] = 1;
  dfs(0, 0);
  return answer;
};
let arr = [
  [0, 0, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 0],
  [0, 0, 0, 1, 0, 0, 0],
  [1, 1, 0, 1, 0, 1, 1],
  [1, 1, 0, 0, 0, 0, 1],
  [1, 1, 0, 1, 1, 0, 0],
  [1, 0, 0, 0, 0, 0, 0],
];

console.log(solution(arr));
