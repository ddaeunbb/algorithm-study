/* 합이 같은 부분집합(DFS : 아마존 인터뷰)
N개의 원소로 구성된 자연수 집합이 주어지면, 이 집합을 두 개의 부분집합으로 나누었을 때
두 부분집합의 원소의 합이 서로 같은 경우가 존재하면 “YES"를 출력하고, 그렇지 않으면
”NO"를 출력하는 프로그램을 작성하세요.
둘로 나뉘는 두 부분집합은 서로소 집합(Disjoint Set)이며, 두 부분집합을 합하면 입력으로 주
어진 원래의 집합이 되어야 합니다.
예를 들어 {1, 3, 5, 6, 7, 10}이 입력되면 {1, 3, 5, 7} = {6, 10} 으로 두 부분집합의 합이
16으로 같은 경우가 존재하는 것을 알 수 있다.
▣ 입력설명
첫 번째 줄에 자연수 N(1<=N<=10)이 주어집니다.
두 번째 줄에 집합의 원소 N개가 주어진다. 각 원소는 중복되지 않으며, 그 크기는 1,000,000
이하입니다.
▣ 출력설명
첫 번째 줄에 “YES" 또는 ”NO"를 출력한다.
 */

// 전체 합 - 현재 부분 집합의 합 = 현재 부분집합의 합 이면 두개의 부분집합은 합이 같다

const solution = (arr) => {
  let answer = "NO";
  // 집합의 전체 합
  let totalSum = arr.reduce((acc, cur) => acc + cur, 0);
  // dfs 탈출 트리거
  let flag = 0;

  const dfs = (v, sum) => {
    if (flag) {
      return;
    }
    if (v === arr.length) {
      // 집합 끝까지 다 확인하면
      if (totalSum - sum === sum) {
        // 전체 합에서 부분집합의 합 빼서 같은지 확인
        // 같다면 두 부분집합의 합이 같은 거니까 answer YES로 바꿔주고 탈출 트리거 true로
        answer = "YES";
        flag = 1;
      }
    } else {
      // 끝까지 확인 안 했으면 이번 요소를 부분집합 요소로 선택하는 경우와 안하는 경우로 dfs 돌리기
      dfs(v + 1, sum + arr[v]);
      dfs(v + 1, sum);
    }
  };
  dfs(0, 0);
  return answer;
};
let arr = [1, 3, 5, 6, 7, 10];
console.log(solution(arr));
